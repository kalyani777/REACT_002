React
	
WhatsApp
Messages -> 
Assume there are 3 messages
	<text value='Hello' />
	<text value='How are you' />
	<text value='I am fine' />
	
Original DOM
	<text value='Hello' />
	<text value='How are you' />
	<text value='I am fine' />
Virtual DOM 
	<text value='Hello' />
	<text value='How are you' />
	<text value='I am fine' />
	
On New Message Arrives 
Virtual DOM - recreated
	<text value='Hello' />
	<text value='How are you' />
	<text value='I am fine' fontSize=20 />
	<text value='Good to Hear' />
Compares each node with original DOM
new Nodes -> will be injected
updated Nodes -> Syncronized/Updated
nodes are deleted -> removed in orginal DOM 

Ex:
Original/Virtual DOM -> r1, r2 , r3 are restaurants
When Data Changes -> r1, r21, r4, r5 
	Virtual DOM -> recreated with r1, r21, r4, r5 and then below changes are applied to original DOM
		-> r2 node is updated with r21
		->r3 will be deleted
		-> r4, r5 will be injected
		
React Principle
	When page is loaded for first time, Virtual DOM and Original DOM are created. 
	Virtual DOM is just replica/clone of original DOM.
	When data changes => Virtual DOM is recreated
	and then Virtual DOM and Original DOM are compared node by node
	if it finds new Node -> Injected
				updated Node -> Updated
				missing in new Virtual DOM -> Deleted
		

React - createElement(type, attributes, html)
ReactDOM - render(what to render, where to render)
Babel -> converts our JSX syntax into older structure 

JSX
	<div id="div1"> Welcome to Demo </div>
Old Structure
	React.createElement('div', { id: 'div1'}, 'Welcome to Demo')
	
HTML vs JSX
HTML 
	not compile - <div> Welcome to Demo <div>
	rendered Directly
JSX 
	compiled - <div> Welcome to Demo </div>
	converted into old structure(React.createElement) and then HTML components are created dynamically and injected
	
	
React Component
	In order to use Life Cycle, We need to use React Components
	
	
Creating a React Component => 
	Create a class and Extend React.Component 
	and implement the render method.
	
Advantages
	Life Cycle
	StateManagement
	
State Management: Assume there are 100 textboxes, we have filled 50 boxes so far... 
suddenly we refreshed the page, 50 textboxes should retain the value. 
This process is called StateManagement.
	HiddenFields
	ViewState
	Cookie
	Local Storage
	Use React Stateful Components
	
Array.prototype.map = function(callback){
	for(var item of this){
		callback(item);
	}
}

function(item) {
	return <li>{item}</li>;
}

Array Function
(item) => {
	return <li>{item}</li>;
}

(item) => <li>{item}</li>;

creating Class with one public Variable in ES6 standard
class Person {
	constructor() {
		this.firstName = '';
	}
}

React -> When data changes, screen refreshes
ie that data should be inside this.state

creating variables
	Local/block level Variable
	Normal Class Level Variable
	State Variable
	Properties -> I can access values but cant update.


Local/block level Variable
var firstName = '';

Normal Variable
this.firstName

State Variable
this.state.firstName

Properties
this.props.firstName

this.state.restaurants = ["A", "B"];
this.setState( { restaurants: ["A", "B", "C"] });

Passing scope to Javascript method
method.bind(this);

setState is an API written in React.Component. 
It will recreate Virtual DOM and then Nodes are synchronized.

Constructing Li Elements
HTML
<ul>
	<li>React</li>
	<li>React Native </li>
</ul>

Approach 1
<ul>
	{courses.map( function(item) {
		return <li>{item}</li>
	} )}
</ul>

Approach 2 - Most Preferable
<ul>
	{courses.map(item => <li>{item}</li>)}
</ul>

Approach 3
renderItem(item){
	return <li>{item}</li>;
}
<ul>
	{courses.map(this.renderItem)}
</ul>

Approach 4
getCourses(items){
	var list = [];
	for(var item of items){
		list.push(<li>{item}</li>);
	}
	return list;
}
<ul>
	{this.getCourses(courses)}
</ul>



<link rel="stylesheet" href="filename.css" />

Events
	Button
		OnClick
	TextBox
		OnChange
		
class TextBox {
	onChange(callback){
		callback(event);
	}
}

onChange(event) {

}
<TextBox onChange={this.onChange} />
<TextBox onChange={event => console.log(event.target.value)} />

string.indexOf(str) gives first occurance of str
"Krishna".indexOf("J") => -1
"Krishna".indexOf("K") => 0
"Krishna".indexOf("i") => 2

// HTML table reference 
https://www.w3schools.com/html/html_tables.asp

// Day 4

Steps to convert html to React Page
1. Place styles inside header with out any change.
2. Copy the html to render API. replace body tag with div.

HTML - Inline Styles
<h3 style="color:green">

JSX
<h3 style={{ color: "green" }}>

Created Custom Table class => ListView
https://reactjs.org/docs/cdn-links.html


Created Custom Table class =>
<ListView 
	columns = {this.state.departmentColumns}
	data = {this.state.departments}
	renderRow = { item => <Department item={item} />}
/>
						
React Native
	<FlatList
	  data={[{key: 'a'}, {key: 'b'}]}
	  renderItem={({item}) => <Text>{item.key}</Text>}
	/>
	

	<ListView
        dataSource={this.state.dataSource}
        renderRow={(rowData) => <Text>{rowData}</Text>}
	/>
	
React Data Grid Module => http://adazzle.github.io/react-data-grid/examples.html#/basic
	 <ReactDataGrid
        columns={this._columns}
        rowGetter={this.rowGetter}
        rowsCount={this._rows.length}
        minHeight={500} />);
Editable Grid
	<ReactDataGrid
        enableCellSelect={true}
        columns={this._columns}
        rowGetter={this.rowGetter}
        rowsCount={this.state.rows.length}
        minHeight={500}
        onGridRowsUpdated={this.handleGridRowsUpdated} />);
		
class ReactDataGrid extends React.Component {
	render(){
		var enableCellSelect = this.props.enableCellSelect;
		var columns = this.props.columns;
		var rowsCount = this.props.rowsCount;
		var rowGetter = this.props.rowGetter;
		var rows = [];
		for(var i = 0; i < rowsCount; i ++) {
			rows.push({ rowId: i});
		}
		return (
			<div>
				<table>
					<tr>
						<th>{columns.map(col => <td>{col.name}</td>)}</th>
					</tr>
					<tbody>
						{rows.map(row => rowGetter(row, enableCellSelect) )}
					</tbody>
				</table>
			</div>
		);
	}
}


Master pages 
	allow you to create a consistent look 
	and behavior for all the pages (or group of pages) in web application.
	provides a template for other pages, with shared layout and functionality. 
	defines placeholders for the content, which can be overridden by content pages.

Page 1	
1 2 3
4 5 6
7 8 9

Page 2
1 2 3
4 51 6
7 8 9

Composition => Creating small Components and reusing multiple small components under Main Conponent.
AboutUs
Header => Welcome to Demo
Container/Center Panel => varies from one page to other
Footer => Copyright information

Contactus
Header => Welcome to Demo
Container/Center Panel => varies from one page to other
Footer => Copyright information

Using Master Page
AboutUs
Add Container as child page to Master Page/Template

<Test a=1 b=2 c=3> <InnerComponent /> </Test>
a, b, c are attributes to Test Component
InnerComponent is a child to Test Component

<Header />
<Header></Header>
	
<table />
<table><tr></tr><tr></tr></table>

class table extends React.Component {
	render() {
		return (
			<div>
				{this.props.children}
			</div>
		);
	}
}

this.props.children => 
	if this.props.children is added inside any component(ComponentA).. 
	In Instance of ComponentA, this.props.children is replace with the child nodes of instance.
	
	
Supporting Master Pages/Templates
Approach 1 => this.props.children
Approach 2 => Custom Routing

<Test {...x} /> => x is an object ... keys present inside x are passed as attributes to Test instance.

	
	
	
	
	
	
	
	
	
	
	
	