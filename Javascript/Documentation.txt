// Start - Day 1

Creating a variable
// syntax
var variableName = defaultValue;

var a = 10;

// Viewing the Values
alert(a); -> displays 10 in alert box
console.log(a); -> prints 10 to console

var b;
console.log(b) -> prints undefined

var c = "Hello";

// Example for boolean
var d = true;

// Ternary Operator
var variableName = condition ? value1 : value2;
if condition is true 
	variableName = value1;
else 
	variableName = value2;
	
var e = a > b ? 30 : 40; 
e value is 40

1 + undefined => NaN
1 - undefined => NaN
1 / undefined => NaN
1 * undefined => NaN

Finding Types
typeof(a) -> number
typeof(b) -> undefined
typeof(c) -> string

Types
	number
	string
	undefined
	boolean
	function
	object
	
	
Creating a function
// Approach 1
// Syntax
function functionName() {

}

function welcome(){
	console.log('Welcome to Demo');
}

// Executing a function
// Syntax
functionName();
welcome();

function addition(x, y) {
	var z = x + y;
	return z;
}

function subtraction(x, y){
	console.log('x value is ' + x);
	console.log('y value is ' + y);
	var z = x - y;
	return z;
}
subtraction(10, 2) => 8
subtraction(5) => NaN => Not a number
If parameter is not passed, it will be considered undefined
subtraction(10, 2, 1) => 8
additional parameters are ignored. 
10 is copied to x
2 is copied to y
1 is ignored

// Handling undefined in functions
function subtraction(x, y){
	x = x || 0;
	y = y || 0;
	console.log('x value is ' + x);
	console.log('y value is ' + y);
	var z = x - y;
	return z;
}

function multiplication(x, y){
	x = x || 1;
	y = y || 1;
	console.log('x value is ' + x);
	console.log('y value is ' + y);
	var z = x * y;
	return z;
}

function division(x, y){
	x = x || 0;
	y = y || 1;
	console.log('x value is ' + x);
	console.log('y value is ' + y);
	var z = x / y;
	return z;
}

// example of usage of return
function process(terminate){
	console.log('Started');
	if(terminate) {
		console.log('Terminated');
		return;
	}
	console.log('End');
}
return is not only used to return values. 
It can stop execution and return control.

// Approach 2 for creating function
// Syntax
var functionName = function () {

}

var addition = function(x, y) {
	x = x || 0;
	y = y || 0;
	return x + y;
}

// Self Executing functions
// Syntax
(function functionName() {})();

(function addition(x, y) {
	x = x || 0;
	y = y || 0;
	return x + y;
})();

passing values
(function addition(x, y) {
	x = x || 0;
	y = y || 0;
	return x + y;
})(10, 20);

setting to variable
var sum = (function addition(x, y) {
	x = x || 0;
	y = y || 0;
	return x + y;
})(10, 20);

lowerCase -> addperson
upperCase -> ADDPERSON
camelCase -> addPerson -> prefers for function Names, instances
variableCase -> AddPerson -> class names

Object
Arrays

Class
	Fields - Private, Public, Global, Static, Constant
	Methods - Private, Public, Global, Static
	Constructor
	Inheritance
	Method Overloading
	
// End - Day 1

// Start - Day 2

== compares only value
=== compares both type and value

1 == 1 => true
1 == "1" => true
1 === 1 => true => 1 === "1"

Object 
	key value pair
	keys can be string or number
	key should not have any space
	key can have symbol like _
	
var person = {
	firstName: 'Arjun',
	lastName: 'Reddy'
}

Accessing a key
using .operator -> person.firstName -> it supports only for keys of type string
using [] brackets -> person['lastName'] -> it supports keys for both string and number


Object.keys(person) -> returns array of keys for a passed in object

// for loop 
for(var key in person){
	console.log('key is ' + key);
	var item = person[key];
	console.log(item);
}


Updating/Adding a key value 
	if key exists, value will be updated, else key value pair is inserted into object
person.city = 'Hyderabad'
person['lastName'] = 'Krishna'

deleting a key
delete person.city

Arrays
var students = ['Arjun', 'Deepthi', 'Rajesh'];

Accessing elements 
students[0] -> Arjun
students[1] -> Deepthi
students[2] -> Rajesh
students[3] -> undefined -> it will return undefined rather than throwing exception

// Adding item to array
students.push('Venkat');

// Deleting last item from array
var item = students.pop();

Printing an array
// Approach 1
for(var index = 0; index < students.length; index ++){
	console.log('index is ' + index);
	var student = students[index];
	console.log(student);
}

// Approach 2 - for in 
for(var index in students){
	console.log('index is ' + index);
	var student = students[index];
	console.log(student);
}

// Approach 3 - for of
for(var student of students){
	console.log(student);
}

break -> stops iteration of of further code and next indexes
// Below code prints only first item and stops execution when index is 1
for(var index in students){
	if(index == 1){
    	break;
	}
	console.log(students[index]);
}

continue -> stop execution of further code and continues with next index
// Below code stops execution and continues to next item when index is 1.
for(var index in students){
	if(index == 1){
    	continue;
	}
	console.log(students[index]);
}

// Example for Object
var calculator = {
	addition: function(x, y){
		return x + y;
	},
	subtraction: function(x, y){
		return x - y;
	}
}
calculator.multiplication = function(x, y) { 
	return x * y ; 
}

calculator['division'] = function(x, y) { 
	return x / y ; 
}

calculator.addition(1, 2) -> 3
calculator['subtraction'](1, 3) -> -2

person.address = [
    { line1: 'Kukatpally', line2: 'Hyderabad'},
    { line1: 'Yousufguda', line2: 'Hyderabad' },
    { line1: 'Ameerpet' },
	{ line3: '1/2/3'}
]

Its not a mandatory that we should have keys for an item inside array
// printing kukatpally
person.address[0].line1
person.address[0]['line1']


var array = [1, "Hello", function printWelcome() { console.log("Welcome to Demo") }]

execution of function
array[2]();

JSON.stringify -> converts object into string.
var response = JSON.stringify(person)

JSON.parse -> converts string to object
JSON.parse(response)


parseInt("10") -> 10 -> converts string to number
parseInt("10.9") -> 10 -> it justs deletes the decimals and not performing round off
parseFloat("10.9") -> 10.9 -> converts string to decimals

Assume this is json, var person2 = { fn : "Karthik" , ln : "Kumar" }

need to generate array of below sample.
var x  = [ "fn => Karthik" , "ln => Kumar" ]

var x = [];
for(var key in person2){
	x.push( key + " => " + person2[key]);
}

// End - Day 2

// Start - Day 3

function person(firstName, lastName) {
	console.log('Welcome to Demo, ' + firstName + lastName);
}
// Skipping first name
person('', 'Kumar')

// Advantages of passing object as input, handling params order
function person(options) {
	console.log('Welcome to Demo, ' + options.firstName + options.lastName );
}
person( { lastName: 'Reddy'}) -> Welcome to Demo, undefinedReddy

function person(options) {
	options = options || {};
	options.firstName = options.firstName || '';
	options.lastName = options.lastName || '';
	console.log('Welcome to Demo, ' + options.firstName + options.lastName );
}
person({ lastName: 'Reddy' }); 


// setting person to Guest User
function person(options) {
	options = options || {};
	options.firstName = options.firstName || 'Guest';
	options.lastName = options.lastName || 'User';
	console.log('Welcome to Demo, ' + options.firstName + options.lastName );
}

function person1( firstName, lastName){
	return {
		getFullName: function(){
        	return firstName + lastName;
		}
	}
}
person1('Arjun', 'Krishna').getFullName() -> ArjunKrishna

function person2() {
	return {
		name: '',
    	setName: function(value){
			this.name = value;
        },
		getName: function(value) {
			return this.name;
		}
	}
}

var obj = person2();
obj.setName('Krishna');
obj.getName() -> Krishna

// Class
  Structure or blueprint
  
  Object Oriented Concepts 
  Access Modifiers - private(Data Hiding), public, global
  Inheritance - Accessing Parent Members inside Child
  Method/Function Overriding -> Overrides inside a child class.
  
  
// Approach 1 for Creating Class
// Syntax
var className = function(constructor){
	// private variables/methods
	// global variables/methods
	
	return {
		// public variables/methods
	}
}
 
var PrintWelcome = function(){
	return {
		welcome: function(){
			console.log('Welcome to Demo');
		}
	}
}
var obj = new PrintWelcome();
obj.welcome() => Welcome to Demo

var obj2 = new PrintWelcome();
obj2.welcome() => Welcome to Demo
obj2.welcome = function() { console.log('Welcome to Overided Demo')} 
obj2.welcome() => Welcome to Overided Demo


var Calculator = function(){
	return {
		add: function(x, y) {
			return x + y;
		},
		sub: function(x, y) {
			return x - y;
		}
	}
}

var ScientifcCalculator  = function(){
	var creditCardNumber = 123456;
	var printToConsole = function(result){
		console.log('result is '+ result);
	}
	
	pi = 3.14;
	getDemoUser = function(){
		return 'Guest User';
	}
	
	return {
		version: 1.0,
		add: function(x, y) {
			var z = x + y;
			printToConsole(z);
			return z;
		},
		sub: function(x, y) {
			var z = x - y;
			printToConsole(z);
			return z;
		},
		areaOfTriangle: function(){
			console.log('areaOfTriangle to be implemented');
		}
	}
}

// public variable/method -> can be accessed with instance
var s1 = new ScientifcCalculator();
console.log(s1.version);
s1.add(1, 2)

// private variable/method -> can't be accessed outside the class
s1.printToConsole() => throws exception

// global variable/method -> can be accessed directly with out instance
console.log(pi);
getDemoUser();


var Person = function(firstName, lastName){
	return {
		getFullName: function(){
			return firstName + ' ' + lastName;
		}
	}
}

var Person2 = function(options){
	options = options || {};
	options.firstName = options.firstName || '';
	options.lastName = options.lastName || '';
	
	return {
		getFullName: function(){
			return options.firstName + ' ' + options.lastName;
		}
	}
}

var CreatePerson = function(options){
	return {
		getName: function(){
			return 'Mr.' + options.name;
		},
		getInfo: function(){
			return {
				name: options.name,
				age: options.age,
				city: options.city
			}
		}
	}
}
var cp1 = new CreatePerson({ name: 'Deepthi', age: 20, city: 'Hyderabad'});

var CreatePerson = function(options){
	return {
		getName: function(){
			return 'Mr.' + options.name;
		},
		getInfo: function(){
			return {
				name: options.name,
				age: options.age,
				city: options.city,
				getString: function() {
					return this.name + " " + options.age + " " + options.city;
				}
			}
		}
	}
}
var cp2 = new CreatePerson({ name: 'Prakash', age: 20, city: 'Hyderabad'});
cp2.getInfo().getString();

// End - Day 3

// Start - Day 4

// Simple Object
var person = {
	name: '',
	getName: function(){
    	return this.name;
	},
	setName: function(value){
    	this.name = value;
	}
}
person.setName('Karthik');
person.getName() => Karthik

// Simple Function
function addition(x, y){
	console.log(x + y);
}
// Execution
// Approach 1
addition(1, 2);

// Approach 2
functionName.call(scope, params);

addition.call(this, 1, 2); => this is like a scope

// Approach 2 for Creating Class
// Syntax
var className = function(constructor){
	// private variables/methods
	// global variables/methods
	
	// public variables/methods
	this.
}

var PrintWelcome = function(){
	
	this.welcome = function(){
		console.log('Welcome to Demo');
	}
}
var p1 = new PrintWelcome();
p1.welcome();

var Calculator = function(){
	this.add = function(x, y) {
		return x + y;
	}
	this.sub = function(x, y) {
		return x - y;
	}
}

var ScientifcCalculator = function(){
	Calculator.call(this);
	this.area = function() {};
}
var s1 = new ScientifcCalculator();
s1.add(1, 2) => 3
s1.area() => 

var Calculator2 = function(){
	var printToConsole = function(result) {
		console.log('result is ' + result);
	}
	this.add = function(x, y) {
		var z = x + y;
		printToConsole(z);
	}
}

var ScientifcCalculator2 = function(){
	Calculator2.call(this);
}

var sc2 = new ScientifcCalculator2();
sc2.add(1, 2); => private method printToConsole is accessible inside child api

// Example for Constructor pattern
function Father(name){
	this.getName = function(){
		return "Mr." + name;
	}
}

var Son = function(name){
	Father.call(this, name);
	this.getAge = function(){
		return 10;
	}
}
var son1 = new Son("Krish")
console.log(son1.getName());
console.log(son1.getAge());

// Multiple Inheritance
function Father(){
	this.getCity = function(){
		return "Hyderabad"
	}
	this.bankAccount = function(){
		return "HDFC";
	}
	this.getName = function(){
		return "Akash";
	}
}
function Mother(){
	this.getLocality = function(){
		return "Ameerpet"
	}
	this.bankAccount = function(){
		return "SBI";
	}
}

var Son = function(){
	Father.call(this);
	Mother.call(this);
	this.getName = function(){
		return "Prakash";
	}
}
var s1 = new Son();
s1.getName() => Prakash => it is overrided inside Son

Method Overloading -> Triggering different code/api based on number of arguments
Actually Method Overloading is not there, using arguments.lenth approach 
we can support method overloading

// Example for Method Overloading
var addition = function(a, b, c, d){
	if(arguments.length == 0) {
		return 0;
	}
	else if(arguments.length == 1) {
		return a;
	}
	else if(arguments.length == 2) {
		return a + b;
	} 
	else if(arguments.length == 3) {
		return a + b + c;
	} 
	else if(arguments.length >= 4) {
		return a + b + c + d;
	}
}


var c1 = new Calculator();
c1.add(1, 2) => 3
c1.sub(1, 2) => -1
c1.mul(1, 2) => throws exception

prototype
	Injects methods into existing Classes 
	It injects methods for old instances and new instances

Calculator.prototype.mul = function(x, y){
	return x * y;
}
c1.mul(10, 2) => 20

// End - Day 4

// Start - Day 5

//Creating Student class having name and age as properties/fields
function Student(options){
	this.name = options.name;
	this.age = options.age;
}

//Creating instances
var s1 = new Student({ name: 'lakshman', age: 20});
var s2 = new Student({ name: 'Venkat', age: 20});

// Creating Students
function createStudents(){
	var students = [];
	
	var s1 = new Student({ name: 'lakshman', age: 20});
	var s2 = new Student({ name: 'Venkat', age: 20});
	
	students.push(s1);
	students.push(s2);
	
	return students;
}

// Creating array of 2 records
var data = [
	{ name: 'lakshman', age: 20},
	{ name: 'Venkat', age: 20}
]

// Creating Students from JSON array
function CreateStudents(){
	var items = [
		{ name: 'lakshman', age: 20, city: 'Hyderabad'},
		{ name: 'Venkat', age: 20, city: 'Vijayawada'}
	];
	var students = [];
	for(var item of items){
		//students.push(new Student(item));
		students.push(new Student({ name: item.name, age: item.age}));
	}
	return students;
}

// normal function
function addition(x, y) {
	return x + y;
}
addition(1, 2);

// Callback function
 passing functions as arguments to the called function. 
 These functions are executed inside called function.
 
function addition(x, y, callBack) {
	callBack();
	return x + y;
}
addition(1, 2, function() { console.log('Calculation is successful')} );

function subtraction(x, y, func){
	var z = x - y;
	func(z);
}

subtraction(10, 2, function(value) { console.log(' Result is ' + value)} );

function multiplication(x, y, callBack){
	var z = x * y;
	callBack(z);
}

function print(value) {
	console.log('result is ' + value);
}

multiplication(2, 10, print);

// End - Day 5

// Start - Day 6

// Approach 3 for Creating Class
// ES6 standards using babel
http://babeljs.io/
babel is a plugin to convert new standards into old standard which browser understands.
Note: Run below examples in babel.html where babel plugin is included inside scripts
class Person {
	getAge(){
		return 20;
	}
}
var p1 = new Person();
p1.getAge(); => 20

class Calculator {
	add(x, y) {
		return x + y;
	}
	sub(x, y){
		return x - y;
	}
}

// Inheritance
class Father {
	getName(){
		return "Venkat";
	}
	getGender(){
		return "Male";
	}
}

class Son extends Father{
	getName(){
		return "Prakash";
	}
	getCity(){
		return "Hyderabad";
	}
}
var s1 = new Son();

s1.getCity() => "Hyderabad"
s1.getName() => "Prakash"
s1.getGender() => "Male"

// Variables can be created inside constructor
class Student{
	constructor(fullName) {
		this.name = fullName;
	}
	static getType(){
		return "Human";
	}
	getFullName(){
		return this.name;
	}
}
var s1 = new Student("Keerthi Reddy")
s1.getFullName()

Student.getType() => Static API => method that can be accessible directly from class and not from instance.

const variables are liked fixed variables and cant be updated
const pi = 3.14; => pi value can be set at the time of initialization and cant be updated later.\

// End - Day 6 - End of Javascript

https://github.com/mkrishna2025/Training/blob/master/Javascript/Complete/Framework%202.0.js


Ext.create('Ext.Button', {
    renderTo: document.body,
    text    : 'Click me',
    scale   : 'large'
});

var Ext = {
	create: function(type, options){
		if(type == 'Ext.Button'){
			var element = document.createElement('input');
			element.type = 'button';
			element.value = options.text;
			options.renderTo.appendChild(element);
		}
	}
}

var childPanel1 = Ext.create('Ext.panel.Panel', {
    title: 'Child Panel 1',
    html: 'A Panel'
});

var Ext = {
	create: function(type, options){
		if(type == 'Ext.Button'){
			var element = document.createElement('input');
			element.type = 'button';
			element.value = options.text;
			options.renderTo.appendChild(element);
		} else if(type == 'Ext.panel.Panel') {
			var element = document.createElement('div');
			element.innerHTML += "<h1>"+ options.title+"</h1>";
			element.innerHTML += html;
			return element;
		}
	}
}


Ext.create('Ext.tab.Panel', {
    renderTo: Ext.getBody(),
    height: 100,
    width: 200,
    items: [
        {
            // Explicitly define the xtype of this Component configuration.
            // This tells the Container (the tab panel in this case)
            // to instantiate a Ext.panel.Panel when it deems necessary
            xtype: 'panel',
            title: 'Tab One',
            html: 'The first tab',
            listeners: {
                render: function() {
                    Ext.MessageBox.alert('Rendered One', 'Tab One was rendered.');
                }
            }
        },
        {
            // xtype for all Component configurations in a Container
            title: 'Tab Two',
            html: 'The second tab',
            listeners: {
                render: function() {
                    Ext.MessageBox.alert('Rendered One', 'Tab Two was rendered.');
                }
            }
        }
    ]
});



























	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


	
	




	

